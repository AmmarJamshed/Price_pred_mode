# -*- coding: utf-8 -*-
"""amazon_price_pred.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EGvyq8knCisA74ueMC9d2a22o2itVtdg
"""

# app.py

import streamlit as st
import pandas as pd
import numpy as np
import os
import joblib
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
import seaborn as sns

st.set_page_config(page_title="Amazon Price Prediction App")

st.title("ðŸ“¦ Amazon Product Price Prediction")

model_file = "amazon_price_model.pkl"

# Upload training data
st.header("Step 1: Upload Training Data")
train_file = st.file_uploader("Upload your cleaned Amazon CSV file", type="csv")

if train_file:
    df = pd.read_csv(train_file)

    # Preprocessing
    try:
        df['discounted_price'] = df['discounted_price'].str.replace("â‚¹", "", regex=False).str.replace(",", "", regex=False).astype(float)
        df['actual_price'] = df['actual_price'].str.replace("â‚¹", "", regex=False).str.replace(",", "", regex=False).astype(float)
        df['discount_percentage'] = df['discount_percentage'].str.replace("%", "", regex=False).astype(float)
        df['rating_count'] = df['rating_count'].str.replace(",", "", regex=False).astype(float)
        df['rating'] = df['rating'].replace('|', np.nan).astype(float)
    except Exception as e:
        st.error(f"Preprocessing failed: {e}")

    df = df[['discounted_price', 'actual_price', 'discount_percentage', 'rating', 'rating_count']].dropna()

    st.subheader("Preview of Cleaned Data")
    st.dataframe(df.head())

    # Train model if not already saved
    if not os.path.exists(model_file):
        x = df.drop('actual_price', axis=1)
        y = df['actual_price']
        x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

        model = LinearRegression()
        model.fit(x_train, y_train)
        preds = model.predict(x_test)

        joblib.dump(model, model_file)
        st.success("Model trained and saved!")

        r2 = r2_score(y_test, preds)
        st.metric(label="RÂ² Score on Training Data", value=round(r2, 3))
    else:
        st.warning("Model already saved. Skip training.")

# --- Future Data Prediction ---
st.header("Step 2: Upload Future Data for Prediction")
test_file = st.file_uploader("Upload new product data (same format, no actual_price)", type="csv", key="test_data")

if test_file and os.path.exists(model_file):
    future_df = pd.read_csv(test_file)

    try:
        future_df['discounted_price'] = future_df['discounted_price'].str.replace("â‚¹", "", regex=False).str.replace(",", "", regex=False).astype(float)
        future_df['discount_percentage'] = future_df['discount_percentage'].str.replace("%", "", regex=False).astype(float)
        future_df['rating_count'] = future_df['rating_count'].str.replace(",", "", regex=False).astype(float)
        future_df['rating'] = future_df['rating'].replace('|', np.nan).astype(float)
    except Exception as e:
        st.error(f"Preprocessing failed: {e}")

    future_df = future_df[['discounted_price', 'discount_percentage', 'rating', 'rating_count']].dropna()

    model = joblib.load(model_file)
    predictions = model.predict(future_df)

    future_df['predicted_actual_price'] = predictions

    st.subheader("ðŸ“ˆ Predictions on Future Data")
    st.dataframe(future_df)

    # Allow download of prediction CSV
    csv = future_df.to_csv(index=False).encode('utf-8')
    st.download_button("ðŸ“¥ Download Predictions CSV", data=csv, file_name="predicted_prices.csv", mime='text/csv')